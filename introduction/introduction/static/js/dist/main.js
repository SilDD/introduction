/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./introduction/introduction/static/js/introduction.js":
/*!*************************************************************!*\
  !*** ./introduction/introduction/static/js/introduction.js ***!
  \*************************************************************/
/***/ (() => {

eval("const scrollWrapper = document.getElementById('scroll-wrapper');\r\nconst scrollContainer = document.getElementById(\"scroll-container\");\r\nconst arrowLeft = document.getElementById(\"arrow-left\");\r\nconst arrowRight = document.getElementById(\"arrow-right\");\r\n\r\n\r\n\r\nfunction isElementLeftInView(element) {\r\n    if (element) {\r\n        const rect = element.getBoundingClientRect();\r\n        return rect.left >= 0;\r\n    }\r\n}\r\n\r\nfunction isElementRightInView(element) {\r\n    if (element) {\r\n        const rect = element.getBoundingClientRect();\r\n\r\n        return  rect.right <= window.innerWidth ;\r\n    }\r\n\r\n\r\n}\r\n\r\n// Funktion, um Pfeile anzuzeigen oder auszublenden\r\nfunction updateArrows() {\r\n    const firstLi = scrollContainer.querySelector(\"li:first-child\");\r\n    const lastLi = scrollContainer.querySelector(\"li:nth-last-child(2)\");\r\n\r\n\r\n\r\n    // Überprüfen, ob das erste <li> sichtbar ist\r\n    if (isElementLeftInView(firstLi)) {\r\n\r\n        arrowLeft.classList.add('invisible');\r\n        arrowLeft.classList.add('opacity-0');\r\n        arrowLeft.classList.remove('visible');\r\n        arrowLeft.classList.remove('opacity-100');\r\n    } else {\r\n\r\n        arrowLeft.classList.add(\"visible\");\r\n        arrowLeft.classList.add('opacity-100');\r\n        arrowLeft.classList.remove('invisible');\r\n        arrowLeft.classList.remove('opacity-0');\r\n    }\r\n\r\n    // Überprüfen, ob das letzte <li> sichtbar ist\r\n    if (isElementRightInView(lastLi)) {\r\n         arrowRight.classList.add('invisible');\r\n         arrowRight.classList.add('opacity-0');\r\n         arrowRight.classList.remove('visible')\r\n         arrowRight.classList.remove('opacity-100');\r\n    } else {\r\n        arrowRight.classList.add(\"visible\");\r\n        arrowRight.classList.add('opacity-100');\r\n        arrowRight.classList.remove('invisible');\r\n        arrowRight.classList.remove('opacity-0');\r\n\r\n\r\n    }\r\n}\r\n\r\n// Eventlistener für das Scrollen im Container\r\nscrollContainer.addEventListener(\"scroll\", () => {\r\n    updateArrows();\r\n});\r\n\r\n// Initial aufrufen, um den korrekten Zustand beim Laden zu überprüfen\r\nupdateArrows();\r\n\r\n// Optional: Funktionen, um nach links/rechts zu scrollen\r\narrowLeft.addEventListener(\"click\", function () {\r\n\r\n    scrollContainer.scrollBy({\r\n        left: -200, // Anpassen nach Bedarf\r\n        behavior: 'smooth'\r\n    });\r\n});\r\n\r\narrowRight.addEventListener(\"click\", function () {\r\n\r\n    scrollContainer.scrollBy({\r\n        left: 200, // Anpassen nach Bedarf\r\n        behavior: 'smooth'\r\n    });\r\n    console.log('clickright')\r\n});\r\n\r\n\r\nlet check = false\r\nlet copyContentValue = null\r\n\r\nwindow.addEventListener(\"scroll\", function () {\r\n    const element = document.querySelector(\".offcanvas-body ul\");\r\n    const scrollPosition = window.scrollY;\r\n    const elementPosition = element.offsetTop;\r\n\r\n    if (scrollPosition > elementPosition) {\r\n        element.classList.add(\"offcanvas_on-scroll\");\r\n    } else {\r\n        element.classList.remove(\"offcanvas_on-scroll\");\r\n        element.style.transition = \"none\";\r\n    }\r\n});\r\n\r\n\r\nlet offcanvasButton = document.getElementById('offcanvasButton');\r\nlet offcanvasElement = document.getElementById('closecanvas_btn');\r\n\r\n\r\noffcanvasButton.addEventListener('click', (e) => {\r\n    e.stopPropagation();\r\n    offcanvasButton.classList.add('move-right');\r\n    offcanvasButton.classList.remove('delay');\r\n});\r\n\r\noffcanvasElement.addEventListener('click', (e) => {\r\n    e.stopPropagation();\r\n    offcanvasButton.classList.add('delay');\r\n    offcanvasButton.classList.remove('move-right');\r\n});\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n\r\n    document.addEventListener('click', (e) => {\r\n\r\n        if (!offcanvasButton.contains(e.target) && !offcanvasElement.contains(e.target)) {\r\n            if (offcanvasButton.classList.contains('move-right')) {\r\n\r\n                offcanvasButton.classList.add('delay');\r\n                offcanvasButton.classList.remove('move-right');\r\n            }\r\n        }\r\n    });\r\n});\r\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const body = document.querySelector('body');\r\n\r\n    body.addEventListener('click', () => {\r\n        if (offcanvasButton.classList.contains('move-right')) {\r\n            console.log('test');\r\n            offcanvasButton.classList.add('delay');\r\n            offcanvasButton.classList.remove('move-right');\r\n        }\r\n    });\r\n});\r\n\r\nfunction copyContent() {\r\n\r\n    const scrollWrapper = document.getElementById('scroll-wrapper');\r\n    if (!check) {\r\n        if (window.innerWidth > 1350) {\r\n            check = true;\r\n            const scrollContainer = document.getElementById('scroll-container');\r\n            copyContentValue = scrollContainer.cloneNode(true);\r\n            scrollWrapper.appendChild(copyContentValue);\r\n        }\r\n    } else {\r\n        if (window.innerWidth < 1350) {\r\n            check = false\r\n            if (copyContentValue) {\r\n                scrollWrapper.removeChild(copyContentValue);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nwindow.addEventListener('resize', () => {\r\n    copyContent(check)\r\n});\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    copyContent(check)\r\n});\r\n\r\n\r\ndocument.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\r\n    anchor.addEventListener('click', function (e) {\r\n        e.preventDefault();\r\n\r\n        document.querySelector(this.getAttribute('href')).scrollIntoView({\r\n            behavior: \"smooth\"\r\n        });\r\n    });\r\n});\n\n//# sourceURL=webpack:///./introduction/introduction/static/js/introduction.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./introduction/introduction/static/js/introduction.js"]();
/******/ 	
/******/ })()
;